<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.example.user.service.impl.UserManageMapper">
	
	<select id="selectUserInfo" parameterType="hashmap" resultType="loginVO">
		select
			USER_ID as authorization,
			USER_SE_CODE as userType,
			USER_NM as name,
			EMAIL_ADRES as userEmail,
			BRTHDY,
			ST_YEAR as stYear,
			ST_GRADE as gradeNm,
			ST_CLASS as classCode,
			ST_CLASS_NM as classNm,
			ST_NUMBER as stNumber,
			SEXDSTN as sex,
			PHOTO_STRE_FILE_NM as profileImageId,
			TEACHER_SE_CODE as userRole,
			SCHUL_NM as userSpaceInfo,
			CONCAT(ST_GRADE, '학년 ', ST_CLASS, '반') as userSpaceOrgInfo
		from COMTNMBER
		where 1=1
		<if test="not empty authorization">
			and USER_ID = #{authorization}
		</if>
		<if test="empty authorization">
		  	and SCHUL_NM = #{userSpaceInfo}
			and ST_CLASS_NM = #{classNm}
			and ST_GRADE = #{gradeNm}
		</if>
	</select>
	
	<select id="authorizationUser" parameterType="hashmap" resultType="boolean">
	    select
	        CASE 
	            WHEN count(*) > 0 THEN 1
	            ELSE 0
	        END as userExists
	    from COMTNMBER
	    where USER_ID = #{authorization}
	</select>
	
	<insert id="insertUserInfo" parameterType="hashmap">
		insert into COMTNMBER(
			USER_ID,
			USER_SE_CODE,
			USER_NM,
			EMAIL_ADRES,
			PHOTO_STRE_FILE_NM,
			SCHUL_GRADE_CODE,
			ST_YEAR,
			ST_GRADE,
			ST_CLASS,
			ST_CLASS_NM,
			ST_NUMBER,
			TEACHER_SE_CODE, 
			SCHUL_CODE,
			SCHUL_NM,
			FRST_REGIST_PNTTM
		)
		values (
			#{authorization},
			#{userType},
			#{name},
			#{userEmail},
			#{profileImageId},
			#{schulGradeCode},
			#{stYear},
			#{gradeNm},
			#{classCode},
			#{classNm},
		    #{stNumber},
			#{userRole},
			#{schulCode},
			#{userSpaceInfo},
			now()
		)
	</insert>
	
	<insert id="insertUserScrtyEstbs" parameterType="hashmap">
		insert into COMTNEMPLYRSCRTYESTBS(SCRTY_DTRMN_TRGET_ID, AUTHOR_CODE)
		values (#{authorization}, #{authorCode})
	</insert>
	
	<update id="updateUserInfo" parameterType="hashmap">
		UPDATE COMTNMBER
		SET
			USER_NM = #{name},
			EMAIL_ADRES = #{userEmail},
			PHOTO_STRE_FILE_NM = #{profileImageId},
			SCHUL_GRADE_CODE = #{schulGradeCode},
			ST_YEAR = #{stYear},
			USER_SE_CODE = #{userType},
			TEACHER_SE_CODE = #{userRole},
			SCHUL_CODE = #{relationInfo},
			ST_GRADE = #{gradeNm},
			ST_CLASS = #{classCode},
			ST_CLASS_Nm = #{classNm},
			ST_NUMBER = #{stNumber},
			TEACHER_SE_CODE = #{userType},
			SCHUL_CODE = #{schulCode},
			SCHUL_NM = #{userSpaceInfo},
			LAST_UPDUSR_PNTTM = now(),
			LAST_UPDUSR_ID = #{authorization}
		WHERE USER_ID = #{authorization}
	</update>

	<update id="updateUserInfoDtl" parameterType="hashmap">
		UPDATE COMTNMBER
		SET
			SEXDSTN = #{sex},
			BRTHDY = #{brthdy}
		WHERE USER_ID = #{authorization}
	</update>

	<select id="selectStudentSelList" parameterType="hashmap" resultType="studentsDTO">
		with sub as (
			SELECT
				a.POLL_ID,
				a.POLL_STATUS
			FROM COMTNBBSPOLLMANAGE a
			WHERE a.USER_ID = #{authorization}
		)
		SELECT 
			mstr.POLL_NM as pollNm,
			mstr.POLL_ID as pollId,
			mstr.POLL_BGNDE as startDate,
			mstr.POLL_ENDDE as endDate,
			case when sub.POLL_STATUS is null then 'todo' else sub.POLL_STATUS end as status,
			case when cast(mstr.POLL_ENDDE as date) <![CDATA[<=]]> cast(now() as date) then false else true end as expired
		FROM COMTNBBSPOLL mstr
		left join sub
		on mstr.POLL_ID = sub.POLL_ID
	</select>
	
	<select id="selectTeacherSelList" parameterType="hashmap" resultType="selVO">
		with teacher_info as (
			select
				SCHUL_CODE,
				ST_GRADE,
				ST_CLASS
			from COMTNMBER
			where USER_ID = #{authorization}
		)
		, mstr as (
			select
				a.POLL_ID,
				a.POLL_NM,
				a.POLL_BGNDE,
				a.POLL_ENDDE,
				case when cast(a.POLL_ENDDE as date) <![CDATA[<]]> cast(now() as date) then 1 else 0 end as expired,
				b.USER_ID,
				sub.SCHUL_CODE
			from COMTNBBSPOLL a, COMTNMBER b
			join teacher_info sub
			on b.SCHUL_CODE = sub.SCHUL_CODE
			and b.ST_GRADE = sub.ST_GRADE
			and b.ST_CLASS = sub.ST_CLASS
			left join COMTNEMPLYRSCRTYESTBS sub2
			on b.USER_ID = sub2.SCRTY_DTRMN_TRGET_ID
			where sub2.AUTHOR_CODE = 'ROLE_STUDENT'
			group by a.POLL_ID, b.USER_ID
		), dt as (
			SELECT
		        a.POLL_ID,
		        b.POLL_NM,
		        a.USER_ID,
		        a.QESITM_SN,
		        a.FRST_REGISTER_PNTTM,
		        ROW_NUMBER() OVER (PARTITION BY POLL_ID, USER_ID ORDER BY QESITM_SN DESC) AS rn
		    FROM COMTNBBSpollATDRN a
			left join COMTNBBSPOLL b
			on a.POLL_ID = b.POLL_ID
		)
		select
			group_concat(mstr.POLL_ID order by mstr.POLL_ID separator ",") as pollId,
			group_concat(mstr.POLL_NM order by mstr.POLL_ID separator ",") as pollNm,
			group_concat(mstr.POLL_BGNDE order by mstr.POLL_ID separator ",") as startDate,
			group_concat(mstr.POLL_ENDDE order by mstr.POLL_ID separator ",") as endDate,
			group_concat(mstr.expired order by mstr.POLL_ID separator ",") as expiredStr,
			mstr.USER_ID as userId,
			sub.USER_NM as name,
			sub.EMAIL_ADRES as email,
			concat(sub.ST_GRADE, '학년 ', sub.ST_CLASS, '반') as classInfo,
			sub.SEXDSTN as sex,
			group_concat(case when sub2.POLL_STATUS = 'done' then true else false end order by mstr.POLL_ID separator ",") as isParticipateStr,
			group_concat(dt.POLL_NM order by mstr.POLL_ID separator ",") as pollIDForfrstRegisterPnttm,
			group_concat(dt.FRST_REGISTER_PNTTM order by mstr.POLL_ID separator ",") as frstRegisterPnttm
		from mstr
		left join COMTNMBER sub
		on mstr.USER_ID = sub.USER_ID
		left join COMTNBBSPOLLMANAGE sub2
		on mstr.USER_ID = sub2.USER_ID
		and mstr.POLL_ID = sub2.POLL_ID
		left join dt
		on mstr.USER_ID = dt.USER_ID
		and mstr.POLL_ID = dt.POLL_ID
		and rn = 1
		group by mstr.USER_ID, sub.USER_NM, sub.EMAIL_ADRES, sub.ST_GRADE, sub.ST_CLASS
	</select>
	
	<select id="isReallyTeacher" parameterType="loginVO" resultType="Boolean">
		select
			case when AUTHOR_CODE='ROLE_TEACHER' then 1 else 0 end as isTeacher
		from COMTNEMPLYRSCRTYESTBS
		where SCRTY_DTRMN_TRGET_ID = #{authorization}
	</select>
	
	<select id="isReallyTeacherDtl" parameterType="String" resultType="loginVO">
		select
			case when a.AUTHOR_CODE='ROLE_TEACHER' then 1 else 0 end as isTeacher,
			b.SCHUL_CODE as userSpaceOrgInfo,
			b.ST_CLASS as classNm,
			b.ST_GRADE as gradeNm
		from COMTNEMPLYRSCRTYESTBS a
		left join COMTNMBER b
		on a.SCRTY_DTRMN_TRGET_ID = b.USER_ID
		where SCRTY_DTRMN_TRGET_ID = #{authorization}
	</select>
	
	<select id="selectIdTokTokTeacher" parameterType="loginVO" resultType="tokVO">
		select
			b.QESITM_ANSWER_TYPE as qesitmAnswerType,
			b.POLL_SCORE as pollScore,
			c.POLL_AVG as pollAvg,
			c.POLL_STDDEV as pollStddev
		from COMTNMBER a
		join COMTNBBSPOLLSCORE b
		on a.USER_ID = b.USER_ID
		left join VW_COMTNBBSPOLLCALC c
		on a.SCHUL_CODE = c.SCHUL_CODE
		and a.ST_GRADE = c.ST_GRADE
		and a.ST_CLASS = c.ST_CLASS
		and b.QESITM_ANSWER_TYPE = c.QESITM_ANSWER_TYPE
		where a.USER_ID = #{authorization}
		and a.SCHUL_CODE = #{userSpaceOrgInfo}
		and a.ST_CLASS = #{classNm}
		and a.ST_GRADE = #{gradeNm}
	</select>
	
	<select id="selectSurveyHistoryisExist" parameterType="surveyVO" resultType="Boolean">
		select
			case when count(*) then 1 else 0 end as isExist
		from HISTSURVEYEVALUATION a
		where a.TEACHER_ID = #{teacherId}
		and a.STUDENT_ID = #{authorization}
		and a.SURVEY_EVALUATION_SE_CODE = #{qesType}
	</select>
	
	<update id="updateResearchResult" parameterType="surveyVO">
		update HISTSURVEYEVALUATION
		set
			SURVEY_EVALUATION_ANSWER_LIST = #{qesAnswer}
		where TEACHER_ID = #{teacherId}
		and STUDENT_ID = #{authorization}
		and SURVEY_EVALUATION_SE_CODE = #{qesType}
	</update>
	
	<insert id="insertResearchResult" parameterType="surveyVO">
		insert into HISTSURVEYEVALUATION(
			TEACHER_ID, 
			STUDENT_ID, 
			SURVEY_EVALUATION_SE_CODE, 
			SURVEY_EVALUATION_ANSWER_LIST
		)
		values (
			#{teacherId},
			#{authorization},
			#{qesType},
			#{qesAnswer}
		)
	</insert>
</mapper>